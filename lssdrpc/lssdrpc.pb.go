// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lssdrpc.proto

package lssdrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OrderSide int32

const (
	OrderSide_buy  OrderSide = 0
	OrderSide_sell OrderSide = 1
)

var OrderSide_name = map[int32]string{
	0: "buy",
	1: "sell",
}

var OrderSide_value = map[string]int32{
	"buy":  0,
	"sell": 1,
}

func (x OrderSide) String() string {
	return proto.EnumName(OrderSide_name, int32(x))
}

func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{0}
}

type SwapSuccess_Role int32

const (
	SwapSuccess_TAKER SwapSuccess_Role = 0
	SwapSuccess_MAKER SwapSuccess_Role = 1
)

var SwapSuccess_Role_name = map[int32]string{
	0: "TAKER",
	1: "MAKER",
}

var SwapSuccess_Role_value = map[string]int32{
	"TAKER": 0,
	"MAKER": 1,
}

func (x SwapSuccess_Role) String() string {
	return proto.EnumName(SwapSuccess_Role_name, int32(x))
}

func (SwapSuccess_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{27, 0}
}

// A non-negative Big Integer represented as string, like "100000000"
type BigInteger struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BigInteger) Reset()         { *m = BigInteger{} }
func (m *BigInteger) String() string { return proto.CompactTextString(m) }
func (*BigInteger) ProtoMessage()    {}
func (*BigInteger) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{0}
}

func (m *BigInteger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BigInteger.Unmarshal(m, b)
}
func (m *BigInteger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BigInteger.Marshal(b, m, deterministic)
}
func (m *BigInteger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BigInteger.Merge(m, src)
}
func (m *BigInteger) XXX_Size() int {
	return xxx_messageInfo_BigInteger.Size(m)
}
func (m *BigInteger) XXX_DiscardUnknown() {
	xxx_messageInfo_BigInteger.DiscardUnknown(m)
}

var xxx_messageInfo_BigInteger proto.InternalMessageInfo

func (m *BigInteger) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type AddCurrencyRequest struct {
	// the currency, like XSN or LTC
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	// the address:port allowing lssd to connect to this currency lnd, like "localhost:10001"
	// right now, it is assumed that the bot runs on the same network than lssd, so, there is
	// no support for authentication.
	LndChannel string `protobuf:"bytes,2,opt,name=lndChannel,proto3" json:"lndChannel,omitempty"`
	// the tls certificate used by lnd, so that lssd can be sure it's connecting to the right lnd
	//
	// Types that are valid to be assigned to TlsCert:
	//	*AddCurrencyRequest_CertPath
	//	*AddCurrencyRequest_RawCert
	TlsCert              isAddCurrencyRequest_TlsCert `protobuf_oneof:"tlsCert"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *AddCurrencyRequest) Reset()         { *m = AddCurrencyRequest{} }
func (m *AddCurrencyRequest) String() string { return proto.CompactTextString(m) }
func (*AddCurrencyRequest) ProtoMessage()    {}
func (*AddCurrencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{1}
}

func (m *AddCurrencyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCurrencyRequest.Unmarshal(m, b)
}
func (m *AddCurrencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCurrencyRequest.Marshal(b, m, deterministic)
}
func (m *AddCurrencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCurrencyRequest.Merge(m, src)
}
func (m *AddCurrencyRequest) XXX_Size() int {
	return xxx_messageInfo_AddCurrencyRequest.Size(m)
}
func (m *AddCurrencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCurrencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddCurrencyRequest proto.InternalMessageInfo

func (m *AddCurrencyRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *AddCurrencyRequest) GetLndChannel() string {
	if m != nil {
		return m.LndChannel
	}
	return ""
}

type isAddCurrencyRequest_TlsCert interface {
	isAddCurrencyRequest_TlsCert()
}

type AddCurrencyRequest_CertPath struct {
	CertPath string `protobuf:"bytes,3,opt,name=certPath,proto3,oneof"`
}

type AddCurrencyRequest_RawCert struct {
	RawCert string `protobuf:"bytes,4,opt,name=rawCert,proto3,oneof"`
}

func (*AddCurrencyRequest_CertPath) isAddCurrencyRequest_TlsCert() {}

func (*AddCurrencyRequest_RawCert) isAddCurrencyRequest_TlsCert() {}

func (m *AddCurrencyRequest) GetTlsCert() isAddCurrencyRequest_TlsCert {
	if m != nil {
		return m.TlsCert
	}
	return nil
}

func (m *AddCurrencyRequest) GetCertPath() string {
	if x, ok := m.GetTlsCert().(*AddCurrencyRequest_CertPath); ok {
		return x.CertPath
	}
	return ""
}

func (m *AddCurrencyRequest) GetRawCert() string {
	if x, ok := m.GetTlsCert().(*AddCurrencyRequest_RawCert); ok {
		return x.RawCert
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AddCurrencyRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AddCurrencyRequest_CertPath)(nil),
		(*AddCurrencyRequest_RawCert)(nil),
	}
}

type AddCurrencyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddCurrencyResponse) Reset()         { *m = AddCurrencyResponse{} }
func (m *AddCurrencyResponse) String() string { return proto.CompactTextString(m) }
func (*AddCurrencyResponse) ProtoMessage()    {}
func (*AddCurrencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{2}
}

func (m *AddCurrencyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCurrencyResponse.Unmarshal(m, b)
}
func (m *AddCurrencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCurrencyResponse.Marshal(b, m, deterministic)
}
func (m *AddCurrencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCurrencyResponse.Merge(m, src)
}
func (m *AddCurrencyResponse) XXX_Size() int {
	return xxx_messageInfo_AddCurrencyResponse.Size(m)
}
func (m *AddCurrencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCurrencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddCurrencyResponse proto.InternalMessageInfo

type GetAddedCurrenciesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAddedCurrenciesRequest) Reset()         { *m = GetAddedCurrenciesRequest{} }
func (m *GetAddedCurrenciesRequest) String() string { return proto.CompactTextString(m) }
func (*GetAddedCurrenciesRequest) ProtoMessage()    {}
func (*GetAddedCurrenciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{3}
}

func (m *GetAddedCurrenciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAddedCurrenciesRequest.Unmarshal(m, b)
}
func (m *GetAddedCurrenciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAddedCurrenciesRequest.Marshal(b, m, deterministic)
}
func (m *GetAddedCurrenciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAddedCurrenciesRequest.Merge(m, src)
}
func (m *GetAddedCurrenciesRequest) XXX_Size() int {
	return xxx_messageInfo_GetAddedCurrenciesRequest.Size(m)
}
func (m *GetAddedCurrenciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAddedCurrenciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAddedCurrenciesRequest proto.InternalMessageInfo

type GetAddedCurrenciesResponse struct {
	Currency             []string `protobuf:"bytes,1,rep,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAddedCurrenciesResponse) Reset()         { *m = GetAddedCurrenciesResponse{} }
func (m *GetAddedCurrenciesResponse) String() string { return proto.CompactTextString(m) }
func (*GetAddedCurrenciesResponse) ProtoMessage()    {}
func (*GetAddedCurrenciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{4}
}

func (m *GetAddedCurrenciesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAddedCurrenciesResponse.Unmarshal(m, b)
}
func (m *GetAddedCurrenciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAddedCurrenciesResponse.Marshal(b, m, deterministic)
}
func (m *GetAddedCurrenciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAddedCurrenciesResponse.Merge(m, src)
}
func (m *GetAddedCurrenciesResponse) XXX_Size() int {
	return xxx_messageInfo_GetAddedCurrenciesResponse.Size(m)
}
func (m *GetAddedCurrenciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAddedCurrenciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAddedCurrenciesResponse proto.InternalMessageInfo

func (m *GetAddedCurrenciesResponse) GetCurrency() []string {
	if m != nil {
		return m.Currency
	}
	return nil
}

type EnableTradingPairRequest struct {
	PairId               string   `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableTradingPairRequest) Reset()         { *m = EnableTradingPairRequest{} }
func (m *EnableTradingPairRequest) String() string { return proto.CompactTextString(m) }
func (*EnableTradingPairRequest) ProtoMessage()    {}
func (*EnableTradingPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{5}
}

func (m *EnableTradingPairRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnableTradingPairRequest.Unmarshal(m, b)
}
func (m *EnableTradingPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnableTradingPairRequest.Marshal(b, m, deterministic)
}
func (m *EnableTradingPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableTradingPairRequest.Merge(m, src)
}
func (m *EnableTradingPairRequest) XXX_Size() int {
	return xxx_messageInfo_EnableTradingPairRequest.Size(m)
}
func (m *EnableTradingPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableTradingPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnableTradingPairRequest proto.InternalMessageInfo

func (m *EnableTradingPairRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

type EnableTradingPairResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableTradingPairResponse) Reset()         { *m = EnableTradingPairResponse{} }
func (m *EnableTradingPairResponse) String() string { return proto.CompactTextString(m) }
func (*EnableTradingPairResponse) ProtoMessage()    {}
func (*EnableTradingPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{6}
}

func (m *EnableTradingPairResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnableTradingPairResponse.Unmarshal(m, b)
}
func (m *EnableTradingPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnableTradingPairResponse.Marshal(b, m, deterministic)
}
func (m *EnableTradingPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableTradingPairResponse.Merge(m, src)
}
func (m *EnableTradingPairResponse) XXX_Size() int {
	return xxx_messageInfo_EnableTradingPairResponse.Size(m)
}
func (m *EnableTradingPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableTradingPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EnableTradingPairResponse proto.InternalMessageInfo

type GetActiveTradingPairRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetActiveTradingPairRequest) Reset()         { *m = GetActiveTradingPairRequest{} }
func (m *GetActiveTradingPairRequest) String() string { return proto.CompactTextString(m) }
func (*GetActiveTradingPairRequest) ProtoMessage()    {}
func (*GetActiveTradingPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{7}
}

func (m *GetActiveTradingPairRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetActiveTradingPairRequest.Unmarshal(m, b)
}
func (m *GetActiveTradingPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetActiveTradingPairRequest.Marshal(b, m, deterministic)
}
func (m *GetActiveTradingPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveTradingPairRequest.Merge(m, src)
}
func (m *GetActiveTradingPairRequest) XXX_Size() int {
	return xxx_messageInfo_GetActiveTradingPairRequest.Size(m)
}
func (m *GetActiveTradingPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveTradingPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveTradingPairRequest proto.InternalMessageInfo

type GetActiveTradingPairResponse struct {
	PairId               []string `protobuf:"bytes,1,rep,name=pairId,proto3" json:"pairId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetActiveTradingPairResponse) Reset()         { *m = GetActiveTradingPairResponse{} }
func (m *GetActiveTradingPairResponse) String() string { return proto.CompactTextString(m) }
func (*GetActiveTradingPairResponse) ProtoMessage()    {}
func (*GetActiveTradingPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{8}
}

func (m *GetActiveTradingPairResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetActiveTradingPairResponse.Unmarshal(m, b)
}
func (m *GetActiveTradingPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetActiveTradingPairResponse.Marshal(b, m, deterministic)
}
func (m *GetActiveTradingPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetActiveTradingPairResponse.Merge(m, src)
}
func (m *GetActiveTradingPairResponse) XXX_Size() int {
	return xxx_messageInfo_GetActiveTradingPairResponse.Size(m)
}
func (m *GetActiveTradingPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetActiveTradingPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetActiveTradingPairResponse proto.InternalMessageInfo

func (m *GetActiveTradingPairResponse) GetPairId() []string {
	if m != nil {
		return m.PairId
	}
	return nil
}

type ListOrdersRequest struct {
	PairId               string   `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	LastKnownPrice       int64    `protobuf:"varint,2,opt,name=lastKnownPrice,proto3" json:"lastKnownPrice,omitempty"`
	Limit                uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOrdersRequest) Reset()         { *m = ListOrdersRequest{} }
func (m *ListOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*ListOrdersRequest) ProtoMessage()    {}
func (*ListOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{9}
}

func (m *ListOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOrdersRequest.Unmarshal(m, b)
}
func (m *ListOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOrdersRequest.Marshal(b, m, deterministic)
}
func (m *ListOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOrdersRequest.Merge(m, src)
}
func (m *ListOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_ListOrdersRequest.Size(m)
}
func (m *ListOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOrdersRequest proto.InternalMessageInfo

func (m *ListOrdersRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *ListOrdersRequest) GetLastKnownPrice() int64 {
	if m != nil {
		return m.LastKnownPrice
	}
	return 0
}

func (m *ListOrdersRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListOrdersResponse struct {
	Orders               []*OrderSummary `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListOrdersResponse) Reset()         { *m = ListOrdersResponse{} }
func (m *ListOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*ListOrdersResponse) ProtoMessage()    {}
func (*ListOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{10}
}

func (m *ListOrdersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOrdersResponse.Unmarshal(m, b)
}
func (m *ListOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOrdersResponse.Marshal(b, m, deterministic)
}
func (m *ListOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOrdersResponse.Merge(m, src)
}
func (m *ListOrdersResponse) XXX_Size() int {
	return xxx_messageInfo_ListOrdersResponse.Size(m)
}
func (m *ListOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOrdersResponse proto.InternalMessageInfo

func (m *ListOrdersResponse) GetOrders() []*OrderSummary {
	if m != nil {
		return m.Orders
	}
	return nil
}

type ListOwnOrdersRequest struct {
	PairId               string   `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOwnOrdersRequest) Reset()         { *m = ListOwnOrdersRequest{} }
func (m *ListOwnOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*ListOwnOrdersRequest) ProtoMessage()    {}
func (*ListOwnOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{11}
}

func (m *ListOwnOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOwnOrdersRequest.Unmarshal(m, b)
}
func (m *ListOwnOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOwnOrdersRequest.Marshal(b, m, deterministic)
}
func (m *ListOwnOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOwnOrdersRequest.Merge(m, src)
}
func (m *ListOwnOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_ListOwnOrdersRequest.Size(m)
}
func (m *ListOwnOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOwnOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOwnOrdersRequest proto.InternalMessageInfo

func (m *ListOwnOrdersRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

type ListOwnOrdersResponse struct {
	Orders               []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOwnOrdersResponse) Reset()         { *m = ListOwnOrdersResponse{} }
func (m *ListOwnOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*ListOwnOrdersResponse) ProtoMessage()    {}
func (*ListOwnOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{12}
}

func (m *ListOwnOrdersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOwnOrdersResponse.Unmarshal(m, b)
}
func (m *ListOwnOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOwnOrdersResponse.Marshal(b, m, deterministic)
}
func (m *ListOwnOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOwnOrdersResponse.Merge(m, src)
}
func (m *ListOwnOrdersResponse) XXX_Size() int {
	return xxx_messageInfo_ListOwnOrdersResponse.Size(m)
}
func (m *ListOwnOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOwnOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOwnOrdersResponse proto.InternalMessageInfo

func (m *ListOwnOrdersResponse) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type PlaceOrderRequest struct {
	PairId               string      `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	Side                 OrderSide   `protobuf:"varint,2,opt,name=side,proto3,enum=lssdrpc.OrderSide" json:"side,omitempty"`
	Funds                *BigInteger `protobuf:"bytes,3,opt,name=funds,proto3" json:"funds,omitempty"`
	Price                *BigInteger `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PlaceOrderRequest) Reset()         { *m = PlaceOrderRequest{} }
func (m *PlaceOrderRequest) String() string { return proto.CompactTextString(m) }
func (*PlaceOrderRequest) ProtoMessage()    {}
func (*PlaceOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{13}
}

func (m *PlaceOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceOrderRequest.Unmarshal(m, b)
}
func (m *PlaceOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceOrderRequest.Marshal(b, m, deterministic)
}
func (m *PlaceOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrderRequest.Merge(m, src)
}
func (m *PlaceOrderRequest) XXX_Size() int {
	return xxx_messageInfo_PlaceOrderRequest.Size(m)
}
func (m *PlaceOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrderRequest proto.InternalMessageInfo

func (m *PlaceOrderRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *PlaceOrderRequest) GetSide() OrderSide {
	if m != nil {
		return m.Side
	}
	return OrderSide_buy
}

func (m *PlaceOrderRequest) GetFunds() *BigInteger {
	if m != nil {
		return m.Funds
	}
	return nil
}

func (m *PlaceOrderRequest) GetPrice() *BigInteger {
	if m != nil {
		return m.Price
	}
	return nil
}

// Outcome of place order, three possible situations
// 1. Order was placed
// 2. Order was placed and matched without going to orderbook
// 3. Place order or swap has failed
type PlaceOrderResponse struct {
	// Types that are valid to be assigned to Outcome:
	//	*PlaceOrderResponse_SwapSuccess
	//	*PlaceOrderResponse_Order
	//	*PlaceOrderResponse_Failure
	Outcome              isPlaceOrderResponse_Outcome `protobuf_oneof:"outcome"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *PlaceOrderResponse) Reset()         { *m = PlaceOrderResponse{} }
func (m *PlaceOrderResponse) String() string { return proto.CompactTextString(m) }
func (*PlaceOrderResponse) ProtoMessage()    {}
func (*PlaceOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{14}
}

func (m *PlaceOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceOrderResponse.Unmarshal(m, b)
}
func (m *PlaceOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceOrderResponse.Marshal(b, m, deterministic)
}
func (m *PlaceOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrderResponse.Merge(m, src)
}
func (m *PlaceOrderResponse) XXX_Size() int {
	return xxx_messageInfo_PlaceOrderResponse.Size(m)
}
func (m *PlaceOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrderResponse proto.InternalMessageInfo

type isPlaceOrderResponse_Outcome interface {
	isPlaceOrderResponse_Outcome()
}

type PlaceOrderResponse_SwapSuccess struct {
	SwapSuccess *SwapSuccess `protobuf:"bytes,1,opt,name=swapSuccess,proto3,oneof"`
}

type PlaceOrderResponse_Order struct {
	Order *Order `protobuf:"bytes,2,opt,name=order,proto3,oneof"`
}

type PlaceOrderResponse_Failure struct {
	Failure *PlaceOrderFailure `protobuf:"bytes,3,opt,name=failure,proto3,oneof"`
}

func (*PlaceOrderResponse_SwapSuccess) isPlaceOrderResponse_Outcome() {}

func (*PlaceOrderResponse_Order) isPlaceOrderResponse_Outcome() {}

func (*PlaceOrderResponse_Failure) isPlaceOrderResponse_Outcome() {}

func (m *PlaceOrderResponse) GetOutcome() isPlaceOrderResponse_Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (m *PlaceOrderResponse) GetSwapSuccess() *SwapSuccess {
	if x, ok := m.GetOutcome().(*PlaceOrderResponse_SwapSuccess); ok {
		return x.SwapSuccess
	}
	return nil
}

func (m *PlaceOrderResponse) GetOrder() *Order {
	if x, ok := m.GetOutcome().(*PlaceOrderResponse_Order); ok {
		return x.Order
	}
	return nil
}

func (m *PlaceOrderResponse) GetFailure() *PlaceOrderFailure {
	if x, ok := m.GetOutcome().(*PlaceOrderResponse_Failure); ok {
		return x.Failure
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PlaceOrderResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PlaceOrderResponse_SwapSuccess)(nil),
		(*PlaceOrderResponse_Order)(nil),
		(*PlaceOrderResponse_Failure)(nil),
	}
}

type OrderbookFailure struct {
	PairId               string      `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	Funds                *BigInteger `protobuf:"bytes,2,opt,name=funds,proto3" json:"funds,omitempty"`
	FailureReason        string      `protobuf:"bytes,3,opt,name=failureReason,proto3" json:"failureReason,omitempty"`
	RequiredFee          *BigInteger `protobuf:"bytes,4,opt,name=requiredFee,proto3" json:"requiredFee,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrderbookFailure) Reset()         { *m = OrderbookFailure{} }
func (m *OrderbookFailure) String() string { return proto.CompactTextString(m) }
func (*OrderbookFailure) ProtoMessage()    {}
func (*OrderbookFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{15}
}

func (m *OrderbookFailure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderbookFailure.Unmarshal(m, b)
}
func (m *OrderbookFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderbookFailure.Marshal(b, m, deterministic)
}
func (m *OrderbookFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderbookFailure.Merge(m, src)
}
func (m *OrderbookFailure) XXX_Size() int {
	return xxx_messageInfo_OrderbookFailure.Size(m)
}
func (m *OrderbookFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderbookFailure.DiscardUnknown(m)
}

var xxx_messageInfo_OrderbookFailure proto.InternalMessageInfo

func (m *OrderbookFailure) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *OrderbookFailure) GetFunds() *BigInteger {
	if m != nil {
		return m.Funds
	}
	return nil
}

func (m *OrderbookFailure) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func (m *OrderbookFailure) GetRequiredFee() *BigInteger {
	if m != nil {
		return m.RequiredFee
	}
	return nil
}

type PlaceOrderFailure struct {
	// Types that are valid to be assigned to Failure:
	//	*PlaceOrderFailure_SwapFailure
	//	*PlaceOrderFailure_OrderbookFailure
	Failure              isPlaceOrderFailure_Failure `protobuf_oneof:"failure"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PlaceOrderFailure) Reset()         { *m = PlaceOrderFailure{} }
func (m *PlaceOrderFailure) String() string { return proto.CompactTextString(m) }
func (*PlaceOrderFailure) ProtoMessage()    {}
func (*PlaceOrderFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{16}
}

func (m *PlaceOrderFailure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceOrderFailure.Unmarshal(m, b)
}
func (m *PlaceOrderFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceOrderFailure.Marshal(b, m, deterministic)
}
func (m *PlaceOrderFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrderFailure.Merge(m, src)
}
func (m *PlaceOrderFailure) XXX_Size() int {
	return xxx_messageInfo_PlaceOrderFailure.Size(m)
}
func (m *PlaceOrderFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrderFailure.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrderFailure proto.InternalMessageInfo

type isPlaceOrderFailure_Failure interface {
	isPlaceOrderFailure_Failure()
}

type PlaceOrderFailure_SwapFailure struct {
	SwapFailure *SwapFailure `protobuf:"bytes,1,opt,name=swapFailure,proto3,oneof"`
}

type PlaceOrderFailure_OrderbookFailure struct {
	OrderbookFailure *OrderbookFailure `protobuf:"bytes,2,opt,name=orderbookFailure,proto3,oneof"`
}

func (*PlaceOrderFailure_SwapFailure) isPlaceOrderFailure_Failure() {}

func (*PlaceOrderFailure_OrderbookFailure) isPlaceOrderFailure_Failure() {}

func (m *PlaceOrderFailure) GetFailure() isPlaceOrderFailure_Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *PlaceOrderFailure) GetSwapFailure() *SwapFailure {
	if x, ok := m.GetFailure().(*PlaceOrderFailure_SwapFailure); ok {
		return x.SwapFailure
	}
	return nil
}

func (m *PlaceOrderFailure) GetOrderbookFailure() *OrderbookFailure {
	if x, ok := m.GetFailure().(*PlaceOrderFailure_OrderbookFailure); ok {
		return x.OrderbookFailure
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PlaceOrderFailure) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PlaceOrderFailure_SwapFailure)(nil),
		(*PlaceOrderFailure_OrderbookFailure)(nil),
	}
}

type CancelOrderRequest struct {
	PairId               string   `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	OrderId              string   `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelOrderRequest) Reset()         { *m = CancelOrderRequest{} }
func (m *CancelOrderRequest) String() string { return proto.CompactTextString(m) }
func (*CancelOrderRequest) ProtoMessage()    {}
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{17}
}

func (m *CancelOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelOrderRequest.Unmarshal(m, b)
}
func (m *CancelOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelOrderRequest.Marshal(b, m, deterministic)
}
func (m *CancelOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOrderRequest.Merge(m, src)
}
func (m *CancelOrderRequest) XXX_Size() int {
	return xxx_messageInfo_CancelOrderRequest.Size(m)
}
func (m *CancelOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOrderRequest proto.InternalMessageInfo

func (m *CancelOrderRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *CancelOrderRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type CancelOrderResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelOrderResponse) Reset()         { *m = CancelOrderResponse{} }
func (m *CancelOrderResponse) String() string { return proto.CompactTextString(m) }
func (*CancelOrderResponse) ProtoMessage()    {}
func (*CancelOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{18}
}

func (m *CancelOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelOrderResponse.Unmarshal(m, b)
}
func (m *CancelOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelOrderResponse.Marshal(b, m, deterministic)
}
func (m *CancelOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOrderResponse.Merge(m, src)
}
func (m *CancelOrderResponse) XXX_Size() int {
	return xxx_messageInfo_CancelOrderResponse.Size(m)
}
func (m *CancelOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOrderResponse proto.InternalMessageInfo

type SubscribeOrdersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeOrdersRequest) Reset()         { *m = SubscribeOrdersRequest{} }
func (m *SubscribeOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeOrdersRequest) ProtoMessage()    {}
func (*SubscribeOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{19}
}

func (m *SubscribeOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeOrdersRequest.Unmarshal(m, b)
}
func (m *SubscribeOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeOrdersRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeOrdersRequest.Merge(m, src)
}
func (m *SubscribeOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeOrdersRequest.Size(m)
}
func (m *SubscribeOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeOrdersRequest proto.InternalMessageInfo

type OrderUpdate struct {
	// Types that are valid to be assigned to Update:
	//	*OrderUpdate_OrderAdded
	//	*OrderUpdate_OrderRemoval
	Update               isOrderUpdate_Update `protobuf_oneof:"update"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *OrderUpdate) Reset()         { *m = OrderUpdate{} }
func (m *OrderUpdate) String() string { return proto.CompactTextString(m) }
func (*OrderUpdate) ProtoMessage()    {}
func (*OrderUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{20}
}

func (m *OrderUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderUpdate.Unmarshal(m, b)
}
func (m *OrderUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderUpdate.Marshal(b, m, deterministic)
}
func (m *OrderUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderUpdate.Merge(m, src)
}
func (m *OrderUpdate) XXX_Size() int {
	return xxx_messageInfo_OrderUpdate.Size(m)
}
func (m *OrderUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_OrderUpdate proto.InternalMessageInfo

type isOrderUpdate_Update interface {
	isOrderUpdate_Update()
}

type OrderUpdate_OrderAdded struct {
	OrderAdded *OrderSummary `protobuf:"bytes,1,opt,name=orderAdded,proto3,oneof"`
}

type OrderUpdate_OrderRemoval struct {
	OrderRemoval *OrderSummary `protobuf:"bytes,2,opt,name=orderRemoval,proto3,oneof"`
}

func (*OrderUpdate_OrderAdded) isOrderUpdate_Update() {}

func (*OrderUpdate_OrderRemoval) isOrderUpdate_Update() {}

func (m *OrderUpdate) GetUpdate() isOrderUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *OrderUpdate) GetOrderAdded() *OrderSummary {
	if x, ok := m.GetUpdate().(*OrderUpdate_OrderAdded); ok {
		return x.OrderAdded
	}
	return nil
}

func (m *OrderUpdate) GetOrderRemoval() *OrderSummary {
	if x, ok := m.GetUpdate().(*OrderUpdate_OrderRemoval); ok {
		return x.OrderRemoval
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OrderUpdate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OrderUpdate_OrderAdded)(nil),
		(*OrderUpdate_OrderRemoval)(nil),
	}
}

type OwnOrderUpdate struct {
	// Types that are valid to be assigned to Update:
	//	*OwnOrderUpdate_OrderAdded
	//	*OwnOrderUpdate_OrderChanged
	//	*OwnOrderUpdate_OrderCompleted
	Update               isOwnOrderUpdate_Update `protobuf_oneof:"update"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *OwnOrderUpdate) Reset()         { *m = OwnOrderUpdate{} }
func (m *OwnOrderUpdate) String() string { return proto.CompactTextString(m) }
func (*OwnOrderUpdate) ProtoMessage()    {}
func (*OwnOrderUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{21}
}

func (m *OwnOrderUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OwnOrderUpdate.Unmarshal(m, b)
}
func (m *OwnOrderUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OwnOrderUpdate.Marshal(b, m, deterministic)
}
func (m *OwnOrderUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnOrderUpdate.Merge(m, src)
}
func (m *OwnOrderUpdate) XXX_Size() int {
	return xxx_messageInfo_OwnOrderUpdate.Size(m)
}
func (m *OwnOrderUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnOrderUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_OwnOrderUpdate proto.InternalMessageInfo

type isOwnOrderUpdate_Update interface {
	isOwnOrderUpdate_Update()
}

type OwnOrderUpdate_OrderAdded struct {
	OrderAdded *Order `protobuf:"bytes,1,opt,name=orderAdded,proto3,oneof"`
}

type OwnOrderUpdate_OrderChanged struct {
	OrderChanged *Order `protobuf:"bytes,2,opt,name=orderChanged,proto3,oneof"`
}

type OwnOrderUpdate_OrderCompleted struct {
	OrderCompleted string `protobuf:"bytes,3,opt,name=orderCompleted,proto3,oneof"`
}

func (*OwnOrderUpdate_OrderAdded) isOwnOrderUpdate_Update() {}

func (*OwnOrderUpdate_OrderChanged) isOwnOrderUpdate_Update() {}

func (*OwnOrderUpdate_OrderCompleted) isOwnOrderUpdate_Update() {}

func (m *OwnOrderUpdate) GetUpdate() isOwnOrderUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *OwnOrderUpdate) GetOrderAdded() *Order {
	if x, ok := m.GetUpdate().(*OwnOrderUpdate_OrderAdded); ok {
		return x.OrderAdded
	}
	return nil
}

func (m *OwnOrderUpdate) GetOrderChanged() *Order {
	if x, ok := m.GetUpdate().(*OwnOrderUpdate_OrderChanged); ok {
		return x.OrderChanged
	}
	return nil
}

func (m *OwnOrderUpdate) GetOrderCompleted() string {
	if x, ok := m.GetUpdate().(*OwnOrderUpdate_OrderCompleted); ok {
		return x.OrderCompleted
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OwnOrderUpdate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OwnOrderUpdate_OrderAdded)(nil),
		(*OwnOrderUpdate_OrderChanged)(nil),
		(*OwnOrderUpdate_OrderCompleted)(nil),
	}
}

type OrderSummary struct {
	PairId string      `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	Price  *BigInteger `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	// The funds of the order in satoshis.
	Funds                *BigInteger `protobuf:"bytes,3,opt,name=funds,proto3" json:"funds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrderSummary) Reset()         { *m = OrderSummary{} }
func (m *OrderSummary) String() string { return proto.CompactTextString(m) }
func (*OrderSummary) ProtoMessage()    {}
func (*OrderSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{22}
}

func (m *OrderSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderSummary.Unmarshal(m, b)
}
func (m *OrderSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderSummary.Marshal(b, m, deterministic)
}
func (m *OrderSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderSummary.Merge(m, src)
}
func (m *OrderSummary) XXX_Size() int {
	return xxx_messageInfo_OrderSummary.Size(m)
}
func (m *OrderSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderSummary.DiscardUnknown(m)
}

var xxx_messageInfo_OrderSummary proto.InternalMessageInfo

func (m *OrderSummary) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *OrderSummary) GetPrice() *BigInteger {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *OrderSummary) GetFunds() *BigInteger {
	if m != nil {
		return m.Funds
	}
	return nil
}

type Order struct {
	PairId  string `protobuf:"bytes,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	OrderId string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	// The price of the order in satoshis.
	Price *BigInteger `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	// The funds of the order in satoshis.
	Funds *BigInteger `protobuf:"bytes,4,opt,name=funds,proto3" json:"funds,omitempty"`
	// The epoch time when this order was created.
	CreatedAt uint64 `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// Whether this order is a buy or sell
	Side OrderSide `protobuf:"varint,6,opt,name=side,proto3,enum=lssdrpc.OrderSide" json:"side,omitempty"`
	// Whether this order is a local own order or a remote peer order.
	IsOwnOrder bool `protobuf:"varint,7,opt,name=isOwnOrder,proto3" json:"isOwnOrder,omitempty"`
	// Currently open partial trades, empty if order hasn't posted any partial trades.
	Open []*OrderPortion `protobuf:"bytes,8,rep,name=open,proto3" json:"open,omitempty"`
	// Already completed partial trades, empty if order hasn't completed any partial trades.
	Closed               []*OrderPortion `protobuf:"bytes,9,rep,name=closed,proto3" json:"closed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{23}
}

func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *Order) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *Order) GetPrice() *BigInteger {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *Order) GetFunds() *BigInteger {
	if m != nil {
		return m.Funds
	}
	return nil
}

func (m *Order) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Order) GetSide() OrderSide {
	if m != nil {
		return m.Side
	}
	return OrderSide_buy
}

func (m *Order) GetIsOwnOrder() bool {
	if m != nil {
		return m.IsOwnOrder
	}
	return false
}

func (m *Order) GetOpen() []*OrderPortion {
	if m != nil {
		return m.Open
	}
	return nil
}

func (m *Order) GetClosed() []*OrderPortion {
	if m != nil {
		return m.Closed
	}
	return nil
}

type OrderPortion struct {
	OrderId              string      `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Amount               *BigInteger `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrderPortion) Reset()         { *m = OrderPortion{} }
func (m *OrderPortion) String() string { return proto.CompactTextString(m) }
func (*OrderPortion) ProtoMessage()    {}
func (*OrderPortion) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{24}
}

func (m *OrderPortion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderPortion.Unmarshal(m, b)
}
func (m *OrderPortion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderPortion.Marshal(b, m, deterministic)
}
func (m *OrderPortion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderPortion.Merge(m, src)
}
func (m *OrderPortion) XXX_Size() int {
	return xxx_messageInfo_OrderPortion.Size(m)
}
func (m *OrderPortion) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderPortion.DiscardUnknown(m)
}

var xxx_messageInfo_OrderPortion proto.InternalMessageInfo

func (m *OrderPortion) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderPortion) GetAmount() *BigInteger {
	if m != nil {
		return m.Amount
	}
	return nil
}

type SubscribeSwapsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeSwapsRequest) Reset()         { *m = SubscribeSwapsRequest{} }
func (m *SubscribeSwapsRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeSwapsRequest) ProtoMessage()    {}
func (*SubscribeSwapsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{25}
}

func (m *SubscribeSwapsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeSwapsRequest.Unmarshal(m, b)
}
func (m *SubscribeSwapsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeSwapsRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeSwapsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeSwapsRequest.Merge(m, src)
}
func (m *SubscribeSwapsRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeSwapsRequest.Size(m)
}
func (m *SubscribeSwapsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeSwapsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeSwapsRequest proto.InternalMessageInfo

type SwapResult struct {
	// Types that are valid to be assigned to Value:
	//	*SwapResult_Success
	//	*SwapResult_Failure
	Value                isSwapResult_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SwapResult) Reset()         { *m = SwapResult{} }
func (m *SwapResult) String() string { return proto.CompactTextString(m) }
func (*SwapResult) ProtoMessage()    {}
func (*SwapResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{26}
}

func (m *SwapResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwapResult.Unmarshal(m, b)
}
func (m *SwapResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwapResult.Marshal(b, m, deterministic)
}
func (m *SwapResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapResult.Merge(m, src)
}
func (m *SwapResult) XXX_Size() int {
	return xxx_messageInfo_SwapResult.Size(m)
}
func (m *SwapResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapResult.DiscardUnknown(m)
}

var xxx_messageInfo_SwapResult proto.InternalMessageInfo

type isSwapResult_Value interface {
	isSwapResult_Value()
}

type SwapResult_Success struct {
	Success *SwapSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type SwapResult_Failure struct {
	Failure *SwapFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*SwapResult_Success) isSwapResult_Value() {}

func (*SwapResult_Failure) isSwapResult_Value() {}

func (m *SwapResult) GetValue() isSwapResult_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SwapResult) GetSuccess() *SwapSuccess {
	if x, ok := m.GetValue().(*SwapResult_Success); ok {
		return x.Success
	}
	return nil
}

func (m *SwapResult) GetFailure() *SwapFailure {
	if x, ok := m.GetValue().(*SwapResult_Failure); ok {
		return x.Failure
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SwapResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SwapResult_Success)(nil),
		(*SwapResult_Failure)(nil),
	}
}

type SwapSuccess struct {
	// Order id assigned by orderbook
	OrderId string `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	// The trading pair that the swap is for.
	PairId string `protobuf:"bytes,2,opt,name=pairId,proto3" json:"pairId,omitempty"`
	// The order funds that was swapped.
	Funds *BigInteger `protobuf:"bytes,3,opt,name=funds,proto3" json:"funds,omitempty"`
	// The hex-encoded payment hash for the swap.
	RHash string `protobuf:"bytes,4,opt,name=rHash,proto3" json:"rHash,omitempty"`
	// The amount received denominated in satoshis.
	AmountReceived *BigInteger `protobuf:"bytes,5,opt,name=amountReceived,proto3" json:"amountReceived,omitempty"`
	// The amount sent denominated in satoshis.
	AmountSent *BigInteger `protobuf:"bytes,6,opt,name=amountSent,proto3" json:"amountSent,omitempty"`
	// Our role in the swap, either MAKER or TAKER.
	Role SwapSuccess_Role `protobuf:"varint,7,opt,name=role,proto3,enum=lssdrpc.SwapSuccess_Role" json:"role,omitempty"`
	// The ticker symbol of the currency received.
	CurrencyReceived string `protobuf:"bytes,8,opt,name=currencyReceived,proto3" json:"currencyReceived,omitempty"`
	// The ticker symbol of the currency sent.
	CurrencySent string `protobuf:"bytes,9,opt,name=currencySent,proto3" json:"currencySent,omitempty"`
	// The hex-encoded preimage.
	RPreimage string `protobuf:"bytes,10,opt,name=rPreimage,proto3" json:"rPreimage,omitempty"`
	// The price used for the swap.
	Price                *BigInteger `protobuf:"bytes,11,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SwapSuccess) Reset()         { *m = SwapSuccess{} }
func (m *SwapSuccess) String() string { return proto.CompactTextString(m) }
func (*SwapSuccess) ProtoMessage()    {}
func (*SwapSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{27}
}

func (m *SwapSuccess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwapSuccess.Unmarshal(m, b)
}
func (m *SwapSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwapSuccess.Marshal(b, m, deterministic)
}
func (m *SwapSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapSuccess.Merge(m, src)
}
func (m *SwapSuccess) XXX_Size() int {
	return xxx_messageInfo_SwapSuccess.Size(m)
}
func (m *SwapSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_SwapSuccess proto.InternalMessageInfo

func (m *SwapSuccess) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *SwapSuccess) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *SwapSuccess) GetFunds() *BigInteger {
	if m != nil {
		return m.Funds
	}
	return nil
}

func (m *SwapSuccess) GetRHash() string {
	if m != nil {
		return m.RHash
	}
	return ""
}

func (m *SwapSuccess) GetAmountReceived() *BigInteger {
	if m != nil {
		return m.AmountReceived
	}
	return nil
}

func (m *SwapSuccess) GetAmountSent() *BigInteger {
	if m != nil {
		return m.AmountSent
	}
	return nil
}

func (m *SwapSuccess) GetRole() SwapSuccess_Role {
	if m != nil {
		return m.Role
	}
	return SwapSuccess_TAKER
}

func (m *SwapSuccess) GetCurrencyReceived() string {
	if m != nil {
		return m.CurrencyReceived
	}
	return ""
}

func (m *SwapSuccess) GetCurrencySent() string {
	if m != nil {
		return m.CurrencySent
	}
	return ""
}

func (m *SwapSuccess) GetRPreimage() string {
	if m != nil {
		return m.RPreimage
	}
	return ""
}

func (m *SwapSuccess) GetPrice() *BigInteger {
	if m != nil {
		return m.Price
	}
	return nil
}

type SwapFailure struct {
	// Order id assigned by orderbook
	OrderId string `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	// The trading pair that the swap is for.
	PairId string `protobuf:"bytes,2,opt,name=pairId,proto3" json:"pairId,omitempty"`
	// The order funds that was attempted to be swapped.
	Funds *BigInteger `protobuf:"bytes,3,opt,name=funds,proto3" json:"funds,omitempty"`
	// The reason why the swap failed.
	FailureReason        string   `protobuf:"bytes,4,opt,name=failureReason,proto3" json:"failureReason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SwapFailure) Reset()         { *m = SwapFailure{} }
func (m *SwapFailure) String() string { return proto.CompactTextString(m) }
func (*SwapFailure) ProtoMessage()    {}
func (*SwapFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{28}
}

func (m *SwapFailure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwapFailure.Unmarshal(m, b)
}
func (m *SwapFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwapFailure.Marshal(b, m, deterministic)
}
func (m *SwapFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapFailure.Merge(m, src)
}
func (m *SwapFailure) XXX_Size() int {
	return xxx_messageInfo_SwapFailure.Size(m)
}
func (m *SwapFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapFailure.DiscardUnknown(m)
}

var xxx_messageInfo_SwapFailure proto.InternalMessageInfo

func (m *SwapFailure) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *SwapFailure) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *SwapFailure) GetFunds() *BigInteger {
	if m != nil {
		return m.Funds
	}
	return nil
}

func (m *SwapFailure) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

// The command to create an invoice to pay the channel rental
type GenerateInvoiceToRentChannelCommand struct {
	Currency             string      `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	PayingCurrency       string      `protobuf:"bytes,2,opt,name=payingCurrency,proto3" json:"payingCurrency,omitempty"`
	Capacity             *BigInteger `protobuf:"bytes,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	LifetimeSeconds      int64       `protobuf:"varint,4,opt,name=lifetimeSeconds,proto3" json:"lifetimeSeconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GenerateInvoiceToRentChannelCommand) Reset()         { *m = GenerateInvoiceToRentChannelCommand{} }
func (m *GenerateInvoiceToRentChannelCommand) String() string { return proto.CompactTextString(m) }
func (*GenerateInvoiceToRentChannelCommand) ProtoMessage()    {}
func (*GenerateInvoiceToRentChannelCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{29}
}

func (m *GenerateInvoiceToRentChannelCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateInvoiceToRentChannelCommand.Unmarshal(m, b)
}
func (m *GenerateInvoiceToRentChannelCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateInvoiceToRentChannelCommand.Marshal(b, m, deterministic)
}
func (m *GenerateInvoiceToRentChannelCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateInvoiceToRentChannelCommand.Merge(m, src)
}
func (m *GenerateInvoiceToRentChannelCommand) XXX_Size() int {
	return xxx_messageInfo_GenerateInvoiceToRentChannelCommand.Size(m)
}
func (m *GenerateInvoiceToRentChannelCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateInvoiceToRentChannelCommand.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateInvoiceToRentChannelCommand proto.InternalMessageInfo

func (m *GenerateInvoiceToRentChannelCommand) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *GenerateInvoiceToRentChannelCommand) GetPayingCurrency() string {
	if m != nil {
		return m.PayingCurrency
	}
	return ""
}

func (m *GenerateInvoiceToRentChannelCommand) GetCapacity() *BigInteger {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *GenerateInvoiceToRentChannelCommand) GetLifetimeSeconds() int64 {
	if m != nil {
		return m.LifetimeSeconds
	}
	return 0
}

// Event for GenerateInvoiceToRentChannelCommand
type GenerateInvoiceToRentChannelResponse struct {
	PaymentRequest       string   `protobuf:"bytes,1,opt,name=paymentRequest,proto3" json:"paymentRequest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateInvoiceToRentChannelResponse) Reset()         { *m = GenerateInvoiceToRentChannelResponse{} }
func (m *GenerateInvoiceToRentChannelResponse) String() string { return proto.CompactTextString(m) }
func (*GenerateInvoiceToRentChannelResponse) ProtoMessage()    {}
func (*GenerateInvoiceToRentChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{30}
}

func (m *GenerateInvoiceToRentChannelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateInvoiceToRentChannelResponse.Unmarshal(m, b)
}
func (m *GenerateInvoiceToRentChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateInvoiceToRentChannelResponse.Marshal(b, m, deterministic)
}
func (m *GenerateInvoiceToRentChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateInvoiceToRentChannelResponse.Merge(m, src)
}
func (m *GenerateInvoiceToRentChannelResponse) XXX_Size() int {
	return xxx_messageInfo_GenerateInvoiceToRentChannelResponse.Size(m)
}
func (m *GenerateInvoiceToRentChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateInvoiceToRentChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateInvoiceToRentChannelResponse proto.InternalMessageInfo

func (m *GenerateInvoiceToRentChannelResponse) GetPaymentRequest() string {
	if m != nil {
		return m.PaymentRequest
	}
	return ""
}

// Ask the server to create a channel with a given node
// The channel details are stored with GenerateInvoiceToRentChannelCommand
// - Response is RentChannelResponse
type RentChannelCommand struct {
	PaymentHash          []byte   `protobuf:"bytes,1,opt,name=paymentHash,proto3" json:"paymentHash,omitempty"`
	PayingCurrency       string   `protobuf:"bytes,2,opt,name=payingCurrency,proto3" json:"payingCurrency,omitempty"`
	NodePublicKey        []byte   `protobuf:"bytes,3,opt,name=nodePublicKey,proto3" json:"nodePublicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RentChannelCommand) Reset()         { *m = RentChannelCommand{} }
func (m *RentChannelCommand) String() string { return proto.CompactTextString(m) }
func (*RentChannelCommand) ProtoMessage()    {}
func (*RentChannelCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{31}
}

func (m *RentChannelCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RentChannelCommand.Unmarshal(m, b)
}
func (m *RentChannelCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RentChannelCommand.Marshal(b, m, deterministic)
}
func (m *RentChannelCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RentChannelCommand.Merge(m, src)
}
func (m *RentChannelCommand) XXX_Size() int {
	return xxx_messageInfo_RentChannelCommand.Size(m)
}
func (m *RentChannelCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_RentChannelCommand.DiscardUnknown(m)
}

var xxx_messageInfo_RentChannelCommand proto.InternalMessageInfo

func (m *RentChannelCommand) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

func (m *RentChannelCommand) GetPayingCurrency() string {
	if m != nil {
		return m.PayingCurrency
	}
	return ""
}

func (m *RentChannelCommand) GetNodePublicKey() []byte {
	if m != nil {
		return m.NodePublicKey
	}
	return nil
}

// Event for RentChannelCommand
type RentChannelResponse struct {
	ChannelId            string   `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RentChannelResponse) Reset()         { *m = RentChannelResponse{} }
func (m *RentChannelResponse) String() string { return proto.CompactTextString(m) }
func (*RentChannelResponse) ProtoMessage()    {}
func (*RentChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{32}
}

func (m *RentChannelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RentChannelResponse.Unmarshal(m, b)
}
func (m *RentChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RentChannelResponse.Marshal(b, m, deterministic)
}
func (m *RentChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RentChannelResponse.Merge(m, src)
}
func (m *RentChannelResponse) XXX_Size() int {
	return xxx_messageInfo_RentChannelResponse.Size(m)
}
func (m *RentChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RentChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RentChannelResponse proto.InternalMessageInfo

func (m *RentChannelResponse) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

// Command to know the status of a channel.
type GetChannelStatusCommand struct {
	ChannelId            string   `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChannelStatusCommand) Reset()         { *m = GetChannelStatusCommand{} }
func (m *GetChannelStatusCommand) String() string { return proto.CompactTextString(m) }
func (*GetChannelStatusCommand) ProtoMessage()    {}
func (*GetChannelStatusCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{33}
}

func (m *GetChannelStatusCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetChannelStatusCommand.Unmarshal(m, b)
}
func (m *GetChannelStatusCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetChannelStatusCommand.Marshal(b, m, deterministic)
}
func (m *GetChannelStatusCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelStatusCommand.Merge(m, src)
}
func (m *GetChannelStatusCommand) XXX_Size() int {
	return xxx_messageInfo_GetChannelStatusCommand.Size(m)
}
func (m *GetChannelStatusCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelStatusCommand.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelStatusCommand proto.InternalMessageInfo

func (m *GetChannelStatusCommand) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

// Event for GetChannelStatusCommand
type GetChannelStatusResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ExpiresAt            int64    `protobuf:"varint,2,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChannelStatusResponse) Reset()         { *m = GetChannelStatusResponse{} }
func (m *GetChannelStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetChannelStatusResponse) ProtoMessage()    {}
func (*GetChannelStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{34}
}

func (m *GetChannelStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetChannelStatusResponse.Unmarshal(m, b)
}
func (m *GetChannelStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetChannelStatusResponse.Marshal(b, m, deterministic)
}
func (m *GetChannelStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelStatusResponse.Merge(m, src)
}
func (m *GetChannelStatusResponse) XXX_Size() int {
	return xxx_messageInfo_GetChannelStatusResponse.Size(m)
}
func (m *GetChannelStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelStatusResponse proto.InternalMessageInfo

func (m *GetChannelStatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetChannelStatusResponse) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

// The command to calculate the fee to rent a channel
type GetFeeToRentChannelCommand struct {
	Currency             string      `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	PayingCurrency       string      `protobuf:"bytes,2,opt,name=payingCurrency,proto3" json:"payingCurrency,omitempty"`
	Capacity             *BigInteger `protobuf:"bytes,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	LifetimeSeconds      int64       `protobuf:"varint,4,opt,name=lifetimeSeconds,proto3" json:"lifetimeSeconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetFeeToRentChannelCommand) Reset()         { *m = GetFeeToRentChannelCommand{} }
func (m *GetFeeToRentChannelCommand) String() string { return proto.CompactTextString(m) }
func (*GetFeeToRentChannelCommand) ProtoMessage()    {}
func (*GetFeeToRentChannelCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{35}
}

func (m *GetFeeToRentChannelCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFeeToRentChannelCommand.Unmarshal(m, b)
}
func (m *GetFeeToRentChannelCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFeeToRentChannelCommand.Marshal(b, m, deterministic)
}
func (m *GetFeeToRentChannelCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeeToRentChannelCommand.Merge(m, src)
}
func (m *GetFeeToRentChannelCommand) XXX_Size() int {
	return xxx_messageInfo_GetFeeToRentChannelCommand.Size(m)
}
func (m *GetFeeToRentChannelCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeeToRentChannelCommand.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeeToRentChannelCommand proto.InternalMessageInfo

func (m *GetFeeToRentChannelCommand) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *GetFeeToRentChannelCommand) GetPayingCurrency() string {
	if m != nil {
		return m.PayingCurrency
	}
	return ""
}

func (m *GetFeeToRentChannelCommand) GetCapacity() *BigInteger {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *GetFeeToRentChannelCommand) GetLifetimeSeconds() int64 {
	if m != nil {
		return m.LifetimeSeconds
	}
	return 0
}

// Event for GenerateInvoiceToRentChannelCommand
type GetFeeToRentChannelResponse struct {
	Fee                  *BigInteger `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetFeeToRentChannelResponse) Reset()         { *m = GetFeeToRentChannelResponse{} }
func (m *GetFeeToRentChannelResponse) String() string { return proto.CompactTextString(m) }
func (*GetFeeToRentChannelResponse) ProtoMessage()    {}
func (*GetFeeToRentChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_197ef81533ed7ae1, []int{36}
}

func (m *GetFeeToRentChannelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFeeToRentChannelResponse.Unmarshal(m, b)
}
func (m *GetFeeToRentChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFeeToRentChannelResponse.Marshal(b, m, deterministic)
}
func (m *GetFeeToRentChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeeToRentChannelResponse.Merge(m, src)
}
func (m *GetFeeToRentChannelResponse) XXX_Size() int {
	return xxx_messageInfo_GetFeeToRentChannelResponse.Size(m)
}
func (m *GetFeeToRentChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeeToRentChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeeToRentChannelResponse proto.InternalMessageInfo

func (m *GetFeeToRentChannelResponse) GetFee() *BigInteger {
	if m != nil {
		return m.Fee
	}
	return nil
}

func init() {
	proto.RegisterEnum("lssdrpc.OrderSide", OrderSide_name, OrderSide_value)
	proto.RegisterEnum("lssdrpc.SwapSuccess_Role", SwapSuccess_Role_name, SwapSuccess_Role_value)
	proto.RegisterType((*BigInteger)(nil), "lssdrpc.BigInteger")
	proto.RegisterType((*AddCurrencyRequest)(nil), "lssdrpc.AddCurrencyRequest")
	proto.RegisterType((*AddCurrencyResponse)(nil), "lssdrpc.AddCurrencyResponse")
	proto.RegisterType((*GetAddedCurrenciesRequest)(nil), "lssdrpc.GetAddedCurrenciesRequest")
	proto.RegisterType((*GetAddedCurrenciesResponse)(nil), "lssdrpc.GetAddedCurrenciesResponse")
	proto.RegisterType((*EnableTradingPairRequest)(nil), "lssdrpc.EnableTradingPairRequest")
	proto.RegisterType((*EnableTradingPairResponse)(nil), "lssdrpc.EnableTradingPairResponse")
	proto.RegisterType((*GetActiveTradingPairRequest)(nil), "lssdrpc.GetActiveTradingPairRequest")
	proto.RegisterType((*GetActiveTradingPairResponse)(nil), "lssdrpc.GetActiveTradingPairResponse")
	proto.RegisterType((*ListOrdersRequest)(nil), "lssdrpc.ListOrdersRequest")
	proto.RegisterType((*ListOrdersResponse)(nil), "lssdrpc.ListOrdersResponse")
	proto.RegisterType((*ListOwnOrdersRequest)(nil), "lssdrpc.ListOwnOrdersRequest")
	proto.RegisterType((*ListOwnOrdersResponse)(nil), "lssdrpc.ListOwnOrdersResponse")
	proto.RegisterType((*PlaceOrderRequest)(nil), "lssdrpc.PlaceOrderRequest")
	proto.RegisterType((*PlaceOrderResponse)(nil), "lssdrpc.PlaceOrderResponse")
	proto.RegisterType((*OrderbookFailure)(nil), "lssdrpc.OrderbookFailure")
	proto.RegisterType((*PlaceOrderFailure)(nil), "lssdrpc.PlaceOrderFailure")
	proto.RegisterType((*CancelOrderRequest)(nil), "lssdrpc.CancelOrderRequest")
	proto.RegisterType((*CancelOrderResponse)(nil), "lssdrpc.CancelOrderResponse")
	proto.RegisterType((*SubscribeOrdersRequest)(nil), "lssdrpc.SubscribeOrdersRequest")
	proto.RegisterType((*OrderUpdate)(nil), "lssdrpc.OrderUpdate")
	proto.RegisterType((*OwnOrderUpdate)(nil), "lssdrpc.OwnOrderUpdate")
	proto.RegisterType((*OrderSummary)(nil), "lssdrpc.OrderSummary")
	proto.RegisterType((*Order)(nil), "lssdrpc.Order")
	proto.RegisterType((*OrderPortion)(nil), "lssdrpc.OrderPortion")
	proto.RegisterType((*SubscribeSwapsRequest)(nil), "lssdrpc.SubscribeSwapsRequest")
	proto.RegisterType((*SwapResult)(nil), "lssdrpc.SwapResult")
	proto.RegisterType((*SwapSuccess)(nil), "lssdrpc.SwapSuccess")
	proto.RegisterType((*SwapFailure)(nil), "lssdrpc.SwapFailure")
	proto.RegisterType((*GenerateInvoiceToRentChannelCommand)(nil), "lssdrpc.GenerateInvoiceToRentChannelCommand")
	proto.RegisterType((*GenerateInvoiceToRentChannelResponse)(nil), "lssdrpc.GenerateInvoiceToRentChannelResponse")
	proto.RegisterType((*RentChannelCommand)(nil), "lssdrpc.RentChannelCommand")
	proto.RegisterType((*RentChannelResponse)(nil), "lssdrpc.RentChannelResponse")
	proto.RegisterType((*GetChannelStatusCommand)(nil), "lssdrpc.GetChannelStatusCommand")
	proto.RegisterType((*GetChannelStatusResponse)(nil), "lssdrpc.GetChannelStatusResponse")
	proto.RegisterType((*GetFeeToRentChannelCommand)(nil), "lssdrpc.GetFeeToRentChannelCommand")
	proto.RegisterType((*GetFeeToRentChannelResponse)(nil), "lssdrpc.GetFeeToRentChannelResponse")
}

func init() { proto.RegisterFile("lssdrpc.proto", fileDescriptor_197ef81533ed7ae1) }

var fileDescriptor_197ef81533ed7ae1 = []byte{
	// 1628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x41, 0x6f, 0xdb, 0xc6,
	0x12, 0x36, 0x2d, 0xc9, 0x92, 0x47, 0xb6, 0xe2, 0xac, 0xed, 0x44, 0x91, 0x1d, 0x3f, 0x67, 0xe3,
	0x18, 0x4e, 0xde, 0x8b, 0x9f, 0xa1, 0xbc, 0x97, 0x04, 0xc8, 0xa1, 0x70, 0xdc, 0xd8, 0x72, 0xd3,
	0xa6, 0x02, 0x9d, 0xa0, 0x40, 0x81, 0x02, 0xa5, 0xc9, 0xb1, 0x43, 0x94, 0x22, 0x15, 0xee, 0xd2,
	0xae, 0x81, 0x1e, 0x7b, 0xe9, 0xa1, 0x40, 0x2f, 0xfd, 0x01, 0x3d, 0x16, 0xe8, 0xa9, 0x40, 0x0f,
	0x45, 0xaf, 0x3d, 0x37, 0xd7, 0xfe, 0x9c, 0x82, 0xcb, 0x25, 0xb9, 0xa4, 0x28, 0xca, 0x39, 0xf4,
	0xd0, 0x1b, 0x77, 0xf6, 0xdb, 0xd9, 0x6f, 0x66, 0x67, 0x67, 0x76, 0x08, 0xf3, 0x0e, 0x63, 0x96,
	0x3f, 0x34, 0xb7, 0x87, 0xbe, 0xc7, 0x3d, 0x52, 0x97, 0x43, 0x4a, 0x01, 0x9e, 0xda, 0xa7, 0x87,
	0x2e, 0xc7, 0x53, 0xf4, 0xc9, 0x12, 0xd4, 0xce, 0x0c, 0x27, 0xc0, 0xb6, 0xb6, 0xae, 0x6d, 0xcd,
	0xea, 0xd1, 0x80, 0x7e, 0xaf, 0x01, 0xd9, 0xb5, 0xac, 0xbd, 0xc0, 0xf7, 0xd1, 0x35, 0x2f, 0x74,
	0x7c, 0x13, 0x20, 0xe3, 0xa4, 0x03, 0x0d, 0x53, 0x8a, 0x24, 0x3e, 0x19, 0x93, 0x35, 0x00, 0xc7,
	0xb5, 0xf6, 0x5e, 0x1b, 0xae, 0x8b, 0x4e, 0x7b, 0x5a, 0xcc, 0x2a, 0x12, 0xb2, 0x0a, 0x0d, 0x13,
	0x7d, 0xde, 0x37, 0xf8, 0xeb, 0x76, 0x25, 0x9c, 0xed, 0x4d, 0xe9, 0x89, 0x84, 0x74, 0xa0, 0xee,
	0x1b, 0xe7, 0x7b, 0xe8, 0xf3, 0x76, 0x55, 0x4e, 0xc6, 0x82, 0xa7, 0xb3, 0x50, 0xe7, 0x0e, 0x0b,
	0x3f, 0xe9, 0x32, 0x2c, 0x66, 0x68, 0xb1, 0xa1, 0xe7, 0x32, 0xa4, 0x2b, 0x70, 0xe3, 0x00, 0xf9,
	0xae, 0x65, 0x61, 0x3c, 0x67, 0x23, 0x93, 0xa4, 0xe9, 0x63, 0xe8, 0x14, 0x4d, 0x46, 0x4b, 0x73,
	0x26, 0x55, 0x54, 0x93, 0x68, 0x17, 0xda, 0xcf, 0x5c, 0xe3, 0xd8, 0xc1, 0x97, 0xbe, 0x61, 0xd9,
	0xee, 0x69, 0xdf, 0xb0, 0xfd, 0xd8, 0x15, 0xd7, 0x60, 0x66, 0x68, 0xd8, 0xfe, 0xa1, 0x25, 0x1d,
	0x21, 0x47, 0x21, 0x95, 0x82, 0x35, 0x92, 0xe7, 0x4d, 0x58, 0x09, 0xa9, 0x98, 0xdc, 0x3e, 0x2b,
	0xd0, 0x49, 0x1f, 0xc2, 0x6a, 0xf1, 0xb4, 0xe4, 0xaa, 0xee, 0x59, 0x51, 0xf6, 0xb4, 0xe1, 0xea,
	0x87, 0x36, 0xe3, 0x1f, 0xfb, 0x16, 0xfa, 0x6c, 0x02, 0x41, 0xb2, 0x09, 0x2d, 0xc7, 0x60, 0xfc,
	0xb9, 0xeb, 0x9d, 0xbb, 0x7d, 0xdf, 0x36, 0x51, 0x9c, 0x55, 0x45, 0xcf, 0x49, 0xc3, 0xc0, 0x70,
	0xec, 0x81, 0xcd, 0xc5, 0x61, 0xcd, 0xeb, 0xd1, 0x80, 0xee, 0x01, 0x51, 0xb7, 0x92, 0xc4, 0xee,
	0xc3, 0x8c, 0x27, 0x24, 0x82, 0x58, 0xb3, 0xbb, 0xbc, 0x1d, 0xc7, 0x9e, 0x00, 0x1e, 0x05, 0x83,
	0x81, 0xe1, 0x5f, 0xe8, 0x12, 0x44, 0xb7, 0x61, 0x49, 0x28, 0x39, 0x77, 0x2f, 0x45, 0x99, 0xbe,
	0x07, 0xcb, 0x39, 0xbc, 0xdc, 0x77, 0x33, 0xb7, 0x6f, 0x2b, 0xbb, 0x6f, 0xb2, 0xe1, 0x8f, 0x1a,
	0x5c, 0xed, 0x3b, 0x86, 0x89, 0x91, 0x78, 0xa2, 0x87, 0xaa, 0xcc, 0xb6, 0x22, 0xbf, 0xb4, 0xba,
	0x24, 0x67, 0x8b, 0x6d, 0xa1, 0x2e, 0xe6, 0xc9, 0x5d, 0xa8, 0x9d, 0x04, 0xae, 0xc5, 0x84, 0x87,
	0x9a, 0xdd, 0xc5, 0x04, 0x98, 0x5e, 0x2f, 0x3d, 0x42, 0x84, 0xd0, 0xa1, 0xf0, 0x75, 0xb5, 0x04,
	0x2a, 0x10, 0xf4, 0x57, 0x0d, 0x88, 0xca, 0x55, 0x9a, 0xfa, 0x18, 0x9a, 0xec, 0xdc, 0x18, 0x1e,
	0x05, 0xa6, 0x89, 0x8c, 0x09, 0xc6, 0xcd, 0xee, 0x52, 0xa2, 0xe7, 0x28, 0x9d, 0xeb, 0x4d, 0xe9,
	0x2a, 0x94, 0x6c, 0x42, 0x4d, 0xb8, 0x41, 0xd8, 0x33, 0xe2, 0xa3, 0xde, 0x94, 0x1e, 0x4d, 0x93,
	0x87, 0x50, 0x3f, 0x31, 0x6c, 0x27, 0xf0, 0x51, 0x1a, 0xd4, 0x49, 0x90, 0x29, 0x9f, 0xfd, 0x08,
	0x11, 0x5e, 0x4f, 0x09, 0x0e, 0xaf, 0xa7, 0x17, 0x70, 0xd3, 0x1b, 0x20, 0xfd, 0x59, 0x83, 0x05,
	0x01, 0x3b, 0xf6, 0xbc, 0x2f, 0x24, 0x74, 0xac, 0x9b, 0x13, 0xf7, 0x4d, 0x4f, 0x74, 0xdf, 0x06,
	0xcc, 0xcb, 0xdd, 0x74, 0x34, 0x98, 0xe7, 0x46, 0x09, 0x44, 0xcf, 0x0a, 0xc9, 0xff, 0xa1, 0xe9,
	0xe3, 0x9b, 0xc0, 0xf6, 0xd1, 0xda, 0xc7, 0x52, 0x57, 0xab, 0x38, 0xfa, 0x43, 0x26, 0x38, 0x62,
	0xd6, 0xd2, 0xdf, 0x72, 0x58, 0xe8, 0xef, 0xd4, 0x17, 0x2a, 0x94, 0x1c, 0xc0, 0x82, 0x97, 0xf3,
	0x81, 0x34, 0xf1, 0x46, 0xd6, 0xf5, 0x0a, 0xa0, 0x37, 0xa5, 0x8f, 0x2c, 0x0a, 0x1d, 0x2b, 0x0d,
	0xa4, 0xfb, 0x40, 0xf6, 0x0c, 0xd7, 0x44, 0xe7, 0x52, 0x01, 0xdc, 0x86, 0xba, 0x50, 0x76, 0x68,
	0xc9, 0x3c, 0x1c, 0x0f, 0xc3, 0xfc, 0x99, 0xd1, 0x23, 0xf3, 0x52, 0x1b, 0xae, 0x1d, 0x05, 0xc7,
	0xcc, 0xf4, 0xed, 0x63, 0xcc, 0x5c, 0x49, 0xfa, 0xad, 0x06, 0x4d, 0x21, 0x79, 0x35, 0xb4, 0x0c,
	0x8e, 0xe4, 0x11, 0x80, 0xd0, 0x25, 0xd2, 0xa9, 0xf4, 0x4a, 0xf1, 0x6d, 0xef, 0x4d, 0xe9, 0x0a,
	0x94, 0x3c, 0x81, 0x39, 0x2f, 0xda, 0x73, 0xe0, 0x9d, 0x19, 0x8e, 0xf4, 0xc8, 0xd8, 0xa5, 0x19,
	0xf0, 0xd3, 0x06, 0xcc, 0x04, 0x62, 0x7f, 0xfa, 0x93, 0x06, 0xad, 0x38, 0x0f, 0x48, 0x4a, 0x3b,
	0x05, 0x94, 0x46, 0x83, 0x5c, 0xe5, 0xf2, 0x3f, 0xc9, 0x25, 0x2c, 0x4d, 0xa7, 0x68, 0x8d, 0xbd,
	0x18, 0x19, 0x14, 0xd9, 0x82, 0x56, 0x34, 0xf6, 0x06, 0x43, 0x07, 0x39, 0x5a, 0x49, 0x19, 0xcb,
	0xc9, 0x15, 0xba, 0x5f, 0xc1, 0x9c, 0x6a, 0x58, 0xd9, 0x5d, 0x18, 0x26, 0xb9, 0xb8, 0x34, 0x3f,
	0xbc, 0x43, 0xd6, 0xa1, 0x6f, 0xa7, 0xa1, 0x26, 0xb6, 0x7f, 0xf7, 0x48, 0x49, 0x19, 0x55, 0x2e,
	0xcf, 0xa8, 0x3a, 0xf1, 0x22, 0xaf, 0xc2, 0xac, 0xe9, 0xa3, 0xc1, 0xd1, 0xda, 0xe5, 0xed, 0xda,
	0xba, 0xb6, 0x55, 0xd5, 0x53, 0x41, 0x92, 0x78, 0x67, 0x26, 0x24, 0xde, 0x35, 0x00, 0x9b, 0xc5,
	0x51, 0xd0, 0xae, 0xaf, 0x6b, 0x5b, 0x0d, 0x5d, 0x91, 0x90, 0xbb, 0x50, 0xf5, 0x86, 0xe8, 0xb6,
	0x1b, 0x45, 0xc5, 0xa8, 0xef, 0xf9, 0xdc, 0xf6, 0x5c, 0x5d, 0x40, 0xc2, 0xca, 0x65, 0x3a, 0x1e,
	0x43, 0xab, 0x3d, 0x5b, 0x06, 0x96, 0x20, 0xfa, 0x4a, 0x9e, 0xa7, 0x94, 0xab, 0xfe, 0xd3, 0xb2,
	0xfe, 0xfb, 0x37, 0xcc, 0x18, 0x03, 0x2f, 0x70, 0x79, 0xd9, 0x91, 0x4a, 0x08, 0xbd, 0x0e, 0xcb,
	0xc9, 0xfd, 0x0b, 0x33, 0x4b, 0x72, 0xfd, 0x2e, 0x00, 0xc2, 0xb1, 0x8e, 0x2c, 0x70, 0x38, 0xd9,
	0x81, 0x3a, 0xbb, 0x54, 0xfe, 0x8f, 0x61, 0xe1, 0x8a, 0x93, 0x4c, 0x0a, 0x1a, 0x97, 0xc1, 0x92,
	0x6c, 0x5e, 0x97, 0xef, 0x41, 0xfa, 0x67, 0x05, 0x9a, 0x8a, 0xd6, 0x12, 0x53, 0xd3, 0xe0, 0x9a,
	0x2e, 0x4e, 0xf0, 0x93, 0xeb, 0xe3, 0x12, 0xd4, 0xfc, 0x9e, 0xc1, 0x5e, 0x47, 0x8f, 0x3f, 0x3d,
	0x1a, 0x90, 0x27, 0xd0, 0x8a, 0x1c, 0xa4, 0xa3, 0x89, 0xf6, 0x19, 0x5a, 0x22, 0x64, 0xc6, 0x68,
	0xca, 0x41, 0xc9, 0x03, 0x80, 0x48, 0x72, 0x84, 0x2e, 0x17, 0x21, 0x35, 0x66, 0xa1, 0x02, 0x23,
	0xf7, 0xa1, 0xea, 0x7b, 0x0e, 0x8a, 0x98, 0x6a, 0x29, 0xf9, 0x5a, 0x71, 0xc4, 0xb6, 0xee, 0x39,
	0xa8, 0x0b, 0x18, 0xb9, 0x07, 0x0b, 0x66, 0xf2, 0x16, 0x95, 0x14, 0x1b, 0xc2, 0x82, 0x11, 0x39,
	0xa1, 0x30, 0x17, 0xcb, 0x04, 0xa3, 0x59, 0x81, 0xcb, 0xc8, 0xc2, 0xeb, 0xe1, 0xf7, 0x7d, 0xb4,
	0x07, 0xc6, 0x29, 0xb6, 0x41, 0x00, 0x52, 0x41, 0x7a, 0x25, 0x9b, 0x13, 0x1f, 0x11, 0xab, 0x50,
	0x0d, 0x69, 0x92, 0x59, 0xa8, 0xbd, 0xdc, 0x7d, 0xfe, 0x4c, 0x5f, 0x98, 0x0a, 0x3f, 0x3f, 0x12,
	0x9f, 0x1a, 0xfd, 0x4e, 0x8b, 0x8e, 0x36, 0xae, 0x58, 0x7f, 0xeb, 0xd1, 0x8e, 0xd4, 0xee, 0x6a,
	0x41, 0xed, 0xa6, 0xbf, 0x6b, 0x70, 0xfb, 0x00, 0x5d, 0xf4, 0x0d, 0x8e, 0x87, 0xee, 0x99, 0x67,
	0x9b, 0xf8, 0xd2, 0xd3, 0xd1, 0xe5, 0xb2, 0x7d, 0xd8, 0xf3, 0x06, 0x03, 0xc3, 0xb5, 0x4a, 0x3b,
	0x90, 0x4d, 0x68, 0x0d, 0x8d, 0x0b, 0xdb, 0x3d, 0x8d, 0xfb, 0x03, 0x49, 0x3a, 0x27, 0x25, 0xff,
	0x85, 0x86, 0x69, 0x0c, 0x0d, 0xd3, 0xe6, 0x17, 0x65, 0xfc, 0x13, 0x10, 0xd9, 0x82, 0x2b, 0x8e,
	0x7d, 0x82, 0xdc, 0x1e, 0xe0, 0x11, 0x9a, 0x5e, 0x9c, 0xea, 0x2a, 0x7a, 0x5e, 0x4c, 0x5f, 0xc0,
	0x46, 0x99, 0x15, 0xca, 0xc3, 0x35, 0x24, 0x35, 0xc0, 0x30, 0x5e, 0xc5, 0x4d, 0x97, 0xc6, 0xe4,
	0xa4, 0xf4, 0x6b, 0x0d, 0x48, 0x81, 0x17, 0xd6, 0xa1, 0x29, 0x81, 0xe2, 0xd2, 0x84, 0x6b, 0xe7,
	0x74, 0x55, 0x74, 0x69, 0x5f, 0x6c, 0xc0, 0xbc, 0xeb, 0x59, 0xd8, 0x0f, 0x8e, 0x1d, 0xdb, 0x7c,
	0x8e, 0x91, 0x43, 0xe6, 0xf4, 0xac, 0x90, 0x3e, 0x80, 0xc5, 0x22, 0x2b, 0xc2, 0x6c, 0x1e, 0x89,
	0x92, 0xc8, 0x49, 0x05, 0xf4, 0x11, 0x5c, 0x3f, 0xc0, 0x78, 0xcd, 0x11, 0x37, 0x78, 0xc0, 0x62,
	0xfe, 0xe5, 0x0b, 0xfb, 0xd0, 0xce, 0x2f, 0x54, 0x5b, 0x20, 0x26, 0x24, 0x71, 0x21, 0x8b, 0x46,
	0xa1, 0x46, 0xfc, 0x72, 0x68, 0xfb, 0xc8, 0x76, 0xb9, 0x6c, 0x68, 0x52, 0x01, 0xfd, 0x4d, 0x13,
	0x3d, 0xe0, 0x3e, 0xfe, 0x23, 0x83, 0xea, 0x7d, 0xd1, 0x35, 0xe6, 0xc9, 0x27, 0x2e, 0xb9, 0x03,
	0x95, 0x13, 0x8c, 0x5f, 0xa8, 0x85, 0x9b, 0x86, 0xf3, 0xf7, 0xd6, 0x60, 0x36, 0xa9, 0xa3, 0xa4,
	0x0e, 0x95, 0xe3, 0xe0, 0x62, 0x61, 0x8a, 0x34, 0xa0, 0xca, 0xd0, 0x71, 0x16, 0xb4, 0xee, 0x2f,
	0x1a, 0x80, 0x99, 0xf4, 0xc7, 0xa4, 0x07, 0x4d, 0xa5, 0xd3, 0x26, 0x2b, 0x89, 0xde, 0xd1, 0xdf,
	0x02, 0x9d, 0xd5, 0xe2, 0x49, 0xc9, 0xef, 0x33, 0x20, 0xa3, 0xfd, 0x37, 0xa1, 0xc9, 0x9a, 0xb1,
	0x9d, 0x7b, 0xe7, 0x76, 0x29, 0x26, 0x52, 0xdf, 0x7d, 0xab, 0xc1, 0x1c, 0x4f, 0x9b, 0x65, 0x46,
	0x3e, 0x85, 0xab, 0x23, 0x1d, 0x38, 0xb9, 0x95, 0xa8, 0x1a, 0xd7, 0xd1, 0x77, 0x68, 0x19, 0x44,
	0xda, 0x62, 0xc2, 0x52, 0x51, 0x87, 0x4e, 0x36, 0x32, 0x4c, 0xc7, 0xf4, 0xf7, 0x9d, 0x3b, 0x13,
	0x50, 0xd2, 0xa2, 0x3f, 0x2a, 0x71, 0x5b, 0x4b, 0x9e, 0x01, 0xa4, 0xad, 0x09, 0x29, 0x6a, 0xc8,
	0x62, 0xdd, 0x2b, 0x85, 0x73, 0x92, 0x76, 0x0f, 0x9a, 0xca, 0xb3, 0x5f, 0x39, 0xcc, 0xd1, 0xa6,
	0x42, 0x39, 0xcc, 0x82, 0x4e, 0x81, 0x7c, 0x00, 0x57, 0x72, 0x9d, 0x02, 0xf9, 0x57, 0x5a, 0x25,
	0x0b, 0x7b, 0x88, 0xce, 0x52, 0xf6, 0x4d, 0x15, 0x3d, 0xdb, 0x77, 0x34, 0xd2, 0x07, 0x92, 0xae,
	0x88, 0x7b, 0xfb, 0xc9, 0xea, 0xae, 0xa7, 0xea, 0x32, 0x8d, 0xc0, 0x8e, 0x16, 0xba, 0x2b, 0xfd,
	0x3b, 0xa1, 0xb8, 0x6b, 0xe4, 0xef, 0x88, 0xe2, 0xae, 0x82, 0xdf, 0x19, 0x2f, 0x60, 0x3e, 0xf3,
	0xbf, 0x81, 0xdc, 0xcc, 0xa2, 0x73, 0xff, 0x2d, 0x3a, 0x6b, 0xe3, 0xa6, 0xe5, 0x81, 0xf6, 0xa1,
	0x16, 0x36, 0x88, 0x8c, 0x1c, 0x40, 0x2b, 0xfb, 0xce, 0x23, 0x6b, 0xa3, 0xd6, 0xaa, 0x0f, 0xc0,
	0xce, 0x62, 0xe6, 0x09, 0x12, 0xbd, 0x03, 0x77, 0xb4, 0xee, 0x37, 0x15, 0xa8, 0xfb, 0xe8, 0x72,
	0xdb, 0x3d, 0x25, 0x17, 0x61, 0x6e, 0x8b, 0x6a, 0x8e, 0x92, 0x1e, 0x64, 0xf9, 0x21, 0xff, 0x51,
	0x62, 0x6e, 0x62, 0x79, 0xed, 0xdc, 0xbf, 0x14, 0x5a, 0x8d, 0x2b, 0x45, 0xac, 0xc4, 0x55, 0x81,
	0xea, 0xd5, 0xa2, 0xc9, 0x44, 0xd3, 0x27, 0xb0, 0x90, 0xcf, 0xf9, 0x64, 0x5d, 0xbd, 0x2e, 0x45,
	0x75, 0xa4, 0x73, 0x6b, 0x2c, 0x22, 0x51, 0xfc, 0x39, 0x2c, 0x16, 0x24, 0x4f, 0x92, 0x49, 0x2d,
	0x63, 0xea, 0x42, 0x67, 0xa3, 0x0c, 0x14, 0xef, 0x70, 0x3c, 0x23, 0xfe, 0xaf, 0x3e, 0xf8, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0x85, 0x0b, 0x45, 0xfb, 0x70, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CurrenciesClient is the client API for Currencies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CurrenciesClient interface {
	// before being able to enable a trading pair, you need to add the two involved currencies
	// for example, for activating XSN_LTC, you will add the XSN currency, and the LTC currency.
	//
	// For now, only currencies supported by lnd (lightning network) work.
	AddCurrency(ctx context.Context, in *AddCurrencyRequest, opts ...grpc.CallOption) (*AddCurrencyResponse, error)
	// Return added currencies, like LTC, before calling this method, you must
	// have already added some currency
	GetAddedCurrencies(ctx context.Context, in *GetAddedCurrenciesRequest, opts ...grpc.CallOption) (*GetAddedCurrenciesResponse, error)
}

type currenciesClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrenciesClient(cc grpc.ClientConnInterface) CurrenciesClient {
	return &currenciesClient{cc}
}

func (c *currenciesClient) AddCurrency(ctx context.Context, in *AddCurrencyRequest, opts ...grpc.CallOption) (*AddCurrencyResponse, error) {
	out := new(AddCurrencyResponse)
	err := c.cc.Invoke(ctx, "/lssdrpc.currencies/AddCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currenciesClient) GetAddedCurrencies(ctx context.Context, in *GetAddedCurrenciesRequest, opts ...grpc.CallOption) (*GetAddedCurrenciesResponse, error) {
	out := new(GetAddedCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/lssdrpc.currencies/GetAddedCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrenciesServer is the server API for Currencies service.
type CurrenciesServer interface {
	// before being able to enable a trading pair, you need to add the two involved currencies
	// for example, for activating XSN_LTC, you will add the XSN currency, and the LTC currency.
	//
	// For now, only currencies supported by lnd (lightning network) work.
	AddCurrency(context.Context, *AddCurrencyRequest) (*AddCurrencyResponse, error)
	// Return added currencies, like LTC, before calling this method, you must
	// have already added some currency
	GetAddedCurrencies(context.Context, *GetAddedCurrenciesRequest) (*GetAddedCurrenciesResponse, error)
}

// UnimplementedCurrenciesServer can be embedded to have forward compatible implementations.
type UnimplementedCurrenciesServer struct {
}

func (*UnimplementedCurrenciesServer) AddCurrency(ctx context.Context, req *AddCurrencyRequest) (*AddCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCurrency not implemented")
}
func (*UnimplementedCurrenciesServer) GetAddedCurrencies(ctx context.Context, req *GetAddedCurrenciesRequest) (*GetAddedCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddedCurrencies not implemented")
}

func RegisterCurrenciesServer(s *grpc.Server, srv CurrenciesServer) {
	s.RegisterService(&_Currencies_serviceDesc, srv)
}

func _Currencies_AddCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServer).AddCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lssdrpc.currencies/AddCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServer).AddCurrency(ctx, req.(*AddCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Currencies_GetAddedCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddedCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServer).GetAddedCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lssdrpc.currencies/GetAddedCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServer).GetAddedCurrencies(ctx, req.(*GetAddedCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Currencies_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lssdrpc.currencies",
	HandlerType: (*CurrenciesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCurrency",
			Handler:    _Currencies_AddCurrency_Handler,
		},
		{
			MethodName: "GetAddedCurrencies",
			Handler:    _Currencies_GetAddedCurrencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lssdrpc.proto",
}

// TradingPairsClient is the client API for TradingPairs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradingPairsClient interface {
	// Enables the given trading pair, like XSN_LTC, before calling this method, you must
	// have already added the involved currencies.
	//
	// After enabling a trading pair, lssd will download the existing orders form the orderbook,
	// try waiting some seconds (5 should be enough) before performing any other operation, so
	// that lssd has the time to sync because this is done in the background.
	EnableTradingPair(ctx context.Context, in *EnableTradingPairRequest, opts ...grpc.CallOption) (*EnableTradingPairResponse, error)
	// Return current active trading pair, like XSN_LTC, before calling this method, you must
	// have already added and activated some trading pair
	GetActiveTradingPair(ctx context.Context, in *GetActiveTradingPairRequest, opts ...grpc.CallOption) (*GetActiveTradingPairResponse, error)
}

type tradingPairsClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingPairsClient(cc grpc.ClientConnInterface) TradingPairsClient {
	return &tradingPairsClient{cc}
}

func (c *tradingPairsClient) EnableTradingPair(ctx context.Context, in *EnableTradingPairRequest, opts ...grpc.CallOption) (*EnableTradingPairResponse, error) {
	out := new(EnableTradingPairResponse)
	err := c.cc.Invoke(ctx, "/lssdrpc.tradingPairs/EnableTradingPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingPairsClient) GetActiveTradingPair(ctx context.Context, in *GetActiveTradingPairRequest, opts ...grpc.CallOption) (*GetActiveTradingPairResponse, error) {
	out := new(GetActiveTradingPairResponse)
	err := c.cc.Invoke(ctx, "/lssdrpc.tradingPairs/GetActiveTradingPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingPairsServer is the server API for TradingPairs service.
type TradingPairsServer interface {
	// Enables the given trading pair, like XSN_LTC, before calling this method, you must
	// have already added the involved currencies.
	//
	// After enabling a trading pair, lssd will download the existing orders form the orderbook,
	// try waiting some seconds (5 should be enough) before performing any other operation, so
	// that lssd has the time to sync because this is done in the background.
	EnableTradingPair(context.Context, *EnableTradingPairRequest) (*EnableTradingPairResponse, error)
	// Return current active trading pair, like XSN_LTC, before calling this method, you must
	// have already added and activated some trading pair
	GetActiveTradingPair(context.Context, *GetActiveTradingPairRequest) (*GetActiveTradingPairResponse, error)
}

// UnimplementedTradingPairsServer can be embedded to have forward compatible implementations.
type UnimplementedTradingPairsServer struct {
}

func (*UnimplementedTradingPairsServer) EnableTradingPair(ctx context.Context, req *EnableTradingPairRequest) (*EnableTradingPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTradingPair not implemented")
}
func (*UnimplementedTradingPairsServer) GetActiveTradingPair(ctx context.Context, req *GetActiveTradingPairRequest) (*GetActiveTradingPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTradingPair not implemented")
}

func RegisterTradingPairsServer(s *grpc.Server, srv TradingPairsServer) {
	s.RegisterService(&_TradingPairs_serviceDesc, srv)
}

func _TradingPairs_EnableTradingPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTradingPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingPairsServer).EnableTradingPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lssdrpc.tradingPairs/EnableTradingPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingPairsServer).EnableTradingPair(ctx, req.(*EnableTradingPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingPairs_GetActiveTradingPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveTradingPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingPairsServer).GetActiveTradingPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lssdrpc.tradingPairs/GetActiveTradingPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingPairsServer).GetActiveTradingPair(ctx, req.(*GetActiveTradingPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradingPairs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lssdrpc.tradingPairs",
	HandlerType: (*TradingPairsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableTradingPair",
			Handler:    _TradingPairs_EnableTradingPair_Handler,
		},
		{
			MethodName: "GetActiveTradingPair",
			Handler:    _TradingPairs_GetActiveTradingPair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lssdrpc.proto",
}

// OrdersClient is the client API for Orders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrdersClient interface {
	// Places an order to the orderbook, you must have already enabled the involved trading pair.
	//
	// NOTE: After the order is matched, lssd will perform the swap automatically, so, your lnd
	// needs to have a channel with enough coins to our hub.
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error)
	// Cancels an existing order.
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	// Subscribe to events related to the orders in the orderbook.
	// Order added, removed will be delivered via this stream.
	SubscribeOrders(ctx context.Context, in *SubscribeOrdersRequest, opts ...grpc.CallOption) (Orders_SubscribeOrdersClient, error)
	// Subscribe to events related to the own oroders in the orderbook.
	// Order added, changed, removed will be delivered via this stream.
	SubscribeOwnOrders(ctx context.Context, in *SubscribeOrdersRequest, opts ...grpc.CallOption) (Orders_SubscribeOwnOrdersClient, error)
	// List the available order on the orderbook.
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	ListOwnOrders(ctx context.Context, in *ListOwnOrdersRequest, opts ...grpc.CallOption) (*ListOwnOrdersResponse, error)
}

type ordersClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersClient(cc grpc.ClientConnInterface) OrdersClient {
	return &ordersClient{cc}
}

func (c *ordersClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error) {
	out := new(PlaceOrderResponse)
	err := c.cc.Invoke(ctx, "/lssdrpc.orders/PlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/lssdrpc.orders/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) SubscribeOrders(ctx context.Context, in *SubscribeOrdersRequest, opts ...grpc.CallOption) (Orders_SubscribeOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Orders_serviceDesc.Streams[0], "/lssdrpc.orders/SubscribeOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &ordersSubscribeOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Orders_SubscribeOrdersClient interface {
	Recv() (*OrderUpdate, error)
	grpc.ClientStream
}

type ordersSubscribeOrdersClient struct {
	grpc.ClientStream
}

func (x *ordersSubscribeOrdersClient) Recv() (*OrderUpdate, error) {
	m := new(OrderUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ordersClient) SubscribeOwnOrders(ctx context.Context, in *SubscribeOrdersRequest, opts ...grpc.CallOption) (Orders_SubscribeOwnOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Orders_serviceDesc.Streams[1], "/lssdrpc.orders/SubscribeOwnOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &ordersSubscribeOwnOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Orders_SubscribeOwnOrdersClient interface {
	Recv() (*OwnOrderUpdate, error)
	grpc.ClientStream
}

type ordersSubscribeOwnOrdersClient struct {
	grpc.ClientStream
}

func (x *ordersSubscribeOwnOrdersClient) Recv() (*OwnOrderUpdate, error) {
	m := new(OwnOrderUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ordersClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/lssdrpc.orders/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) ListOwnOrders(ctx context.Context, in *ListOwnOrdersRequest, opts ...grpc.CallOption) (*ListOwnOrdersResponse, error) {
	out := new(ListOwnOrdersResponse)
	err := c.cc.Invoke(ctx, "/lssdrpc.orders/ListOwnOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersServer is the server API for Orders service.
type OrdersServer interface {
	// Places an order to the orderbook, you must have already enabled the involved trading pair.
	//
	// NOTE: After the order is matched, lssd will perform the swap automatically, so, your lnd
	// needs to have a channel with enough coins to our hub.
	PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error)
	// Cancels an existing order.
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	// Subscribe to events related to the orders in the orderbook.
	// Order added, removed will be delivered via this stream.
	SubscribeOrders(*SubscribeOrdersRequest, Orders_SubscribeOrdersServer) error
	// Subscribe to events related to the own oroders in the orderbook.
	// Order added, changed, removed will be delivered via this stream.
	SubscribeOwnOrders(*SubscribeOrdersRequest, Orders_SubscribeOwnOrdersServer) error
	// List the available order on the orderbook.
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	ListOwnOrders(context.Context, *ListOwnOrdersRequest) (*ListOwnOrdersResponse, error)
}

// UnimplementedOrdersServer can be embedded to have forward compatible implementations.
type UnimplementedOrdersServer struct {
}

func (*UnimplementedOrdersServer) PlaceOrder(ctx context.Context, req *PlaceOrderRequest) (*PlaceOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (*UnimplementedOrdersServer) CancelOrder(ctx context.Context, req *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (*UnimplementedOrdersServer) SubscribeOrders(req *SubscribeOrdersRequest, srv Orders_SubscribeOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOrders not implemented")
}
func (*UnimplementedOrdersServer) SubscribeOwnOrders(req *SubscribeOrdersRequest, srv Orders_SubscribeOwnOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOwnOrders not implemented")
}
func (*UnimplementedOrdersServer) ListOrders(ctx context.Context, req *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (*UnimplementedOrdersServer) ListOwnOrders(ctx context.Context, req *ListOwnOrdersRequest) (*ListOwnOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwnOrders not implemented")
}

func RegisterOrdersServer(s *grpc.Server, srv OrdersServer) {
	s.RegisterService(&_Orders_serviceDesc, srv)
}

func _Orders_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lssdrpc.orders/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lssdrpc.orders/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_SubscribeOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrdersServer).SubscribeOrders(m, &ordersSubscribeOrdersServer{stream})
}

type Orders_SubscribeOrdersServer interface {
	Send(*OrderUpdate) error
	grpc.ServerStream
}

type ordersSubscribeOrdersServer struct {
	grpc.ServerStream
}

func (x *ordersSubscribeOrdersServer) Send(m *OrderUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Orders_SubscribeOwnOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrdersServer).SubscribeOwnOrders(m, &ordersSubscribeOwnOrdersServer{stream})
}

type Orders_SubscribeOwnOrdersServer interface {
	Send(*OwnOrderUpdate) error
	grpc.ServerStream
}

type ordersSubscribeOwnOrdersServer struct {
	grpc.ServerStream
}

func (x *ordersSubscribeOwnOrdersServer) Send(m *OwnOrderUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Orders_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lssdrpc.orders/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_ListOwnOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOwnOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).ListOwnOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lssdrpc.orders/ListOwnOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).ListOwnOrders(ctx, req.(*ListOwnOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Orders_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lssdrpc.orders",
	HandlerType: (*OrdersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _Orders_PlaceOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Orders_CancelOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _Orders_ListOrders_Handler,
		},
		{
			MethodName: "ListOwnOrders",
			Handler:    _Orders_ListOwnOrders_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOrders",
			Handler:       _Orders_SubscribeOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeOwnOrders",
			Handler:       _Orders_SubscribeOwnOrders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lssdrpc.proto",
}

// SwapsClient is the client API for Swaps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SwapsClient interface {
	SubscribeSwaps(ctx context.Context, in *SubscribeSwapsRequest, opts ...grpc.CallOption) (Swaps_SubscribeSwapsClient, error)
}

type swapsClient struct {
	cc grpc.ClientConnInterface
}

func NewSwapsClient(cc grpc.ClientConnInterface) SwapsClient {
	return &swapsClient{cc}
}

func (c *swapsClient) SubscribeSwaps(ctx context.Context, in *SubscribeSwapsRequest, opts ...grpc.CallOption) (Swaps_SubscribeSwapsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Swaps_serviceDesc.Streams[0], "/lssdrpc.swaps/SubscribeSwaps", opts...)
	if err != nil {
		return nil, err
	}
	x := &swapsSubscribeSwapsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Swaps_SubscribeSwapsClient interface {
	Recv() (*SwapResult, error)
	grpc.ClientStream
}

type swapsSubscribeSwapsClient struct {
	grpc.ClientStream
}

func (x *swapsSubscribeSwapsClient) Recv() (*SwapResult, error) {
	m := new(SwapResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SwapsServer is the server API for Swaps service.
type SwapsServer interface {
	SubscribeSwaps(*SubscribeSwapsRequest, Swaps_SubscribeSwapsServer) error
}

// UnimplementedSwapsServer can be embedded to have forward compatible implementations.
type UnimplementedSwapsServer struct {
}

func (*UnimplementedSwapsServer) SubscribeSwaps(req *SubscribeSwapsRequest, srv Swaps_SubscribeSwapsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSwaps not implemented")
}

func RegisterSwapsServer(s *grpc.Server, srv SwapsServer) {
	s.RegisterService(&_Swaps_serviceDesc, srv)
}

func _Swaps_SubscribeSwaps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeSwapsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwapsServer).SubscribeSwaps(m, &swapsSubscribeSwapsServer{stream})
}

type Swaps_SubscribeSwapsServer interface {
	Send(*SwapResult) error
	grpc.ServerStream
}

type swapsSubscribeSwapsServer struct {
	grpc.ServerStream
}

func (x *swapsSubscribeSwapsServer) Send(m *SwapResult) error {
	return x.ServerStream.SendMsg(m)
}

var _Swaps_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lssdrpc.swaps",
	HandlerType: (*SwapsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeSwaps",
			Handler:       _Swaps_SubscribeSwaps_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lssdrpc.proto",
}

// RentingClient is the client API for Renting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RentingClient interface {
	GenerateRentChannelInvoice(ctx context.Context, in *GenerateInvoiceToRentChannelCommand, opts ...grpc.CallOption) (*GenerateInvoiceToRentChannelResponse, error)
	RentChannel(ctx context.Context, in *RentChannelCommand, opts ...grpc.CallOption) (*RentChannelResponse, error)
	GetChannelStatus(ctx context.Context, in *GetChannelStatusCommand, opts ...grpc.CallOption) (*GetChannelStatusResponse, error)
	GetFeeToRentChannel(ctx context.Context, in *GetFeeToRentChannelCommand, opts ...grpc.CallOption) (*GetFeeToRentChannelResponse, error)
}

type rentingClient struct {
	cc grpc.ClientConnInterface
}

func NewRentingClient(cc grpc.ClientConnInterface) RentingClient {
	return &rentingClient{cc}
}

func (c *rentingClient) GenerateRentChannelInvoice(ctx context.Context, in *GenerateInvoiceToRentChannelCommand, opts ...grpc.CallOption) (*GenerateInvoiceToRentChannelResponse, error) {
	out := new(GenerateInvoiceToRentChannelResponse)
	err := c.cc.Invoke(ctx, "/lssdrpc.renting/GenerateRentChannelInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentingClient) RentChannel(ctx context.Context, in *RentChannelCommand, opts ...grpc.CallOption) (*RentChannelResponse, error) {
	out := new(RentChannelResponse)
	err := c.cc.Invoke(ctx, "/lssdrpc.renting/RentChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentingClient) GetChannelStatus(ctx context.Context, in *GetChannelStatusCommand, opts ...grpc.CallOption) (*GetChannelStatusResponse, error) {
	out := new(GetChannelStatusResponse)
	err := c.cc.Invoke(ctx, "/lssdrpc.renting/GetChannelStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentingClient) GetFeeToRentChannel(ctx context.Context, in *GetFeeToRentChannelCommand, opts ...grpc.CallOption) (*GetFeeToRentChannelResponse, error) {
	out := new(GetFeeToRentChannelResponse)
	err := c.cc.Invoke(ctx, "/lssdrpc.renting/GetFeeToRentChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RentingServer is the server API for Renting service.
type RentingServer interface {
	GenerateRentChannelInvoice(context.Context, *GenerateInvoiceToRentChannelCommand) (*GenerateInvoiceToRentChannelResponse, error)
	RentChannel(context.Context, *RentChannelCommand) (*RentChannelResponse, error)
	GetChannelStatus(context.Context, *GetChannelStatusCommand) (*GetChannelStatusResponse, error)
	GetFeeToRentChannel(context.Context, *GetFeeToRentChannelCommand) (*GetFeeToRentChannelResponse, error)
}

// UnimplementedRentingServer can be embedded to have forward compatible implementations.
type UnimplementedRentingServer struct {
}

func (*UnimplementedRentingServer) GenerateRentChannelInvoice(ctx context.Context, req *GenerateInvoiceToRentChannelCommand) (*GenerateInvoiceToRentChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRentChannelInvoice not implemented")
}
func (*UnimplementedRentingServer) RentChannel(ctx context.Context, req *RentChannelCommand) (*RentChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RentChannel not implemented")
}
func (*UnimplementedRentingServer) GetChannelStatus(ctx context.Context, req *GetChannelStatusCommand) (*GetChannelStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelStatus not implemented")
}
func (*UnimplementedRentingServer) GetFeeToRentChannel(ctx context.Context, req *GetFeeToRentChannelCommand) (*GetFeeToRentChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeToRentChannel not implemented")
}

func RegisterRentingServer(s *grpc.Server, srv RentingServer) {
	s.RegisterService(&_Renting_serviceDesc, srv)
}

func _Renting_GenerateRentChannelInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInvoiceToRentChannelCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentingServer).GenerateRentChannelInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lssdrpc.renting/GenerateRentChannelInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentingServer).GenerateRentChannelInvoice(ctx, req.(*GenerateInvoiceToRentChannelCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Renting_RentChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RentChannelCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentingServer).RentChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lssdrpc.renting/RentChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentingServer).RentChannel(ctx, req.(*RentChannelCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Renting_GetChannelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelStatusCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentingServer).GetChannelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lssdrpc.renting/GetChannelStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentingServer).GetChannelStatus(ctx, req.(*GetChannelStatusCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Renting_GetFeeToRentChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeToRentChannelCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentingServer).GetFeeToRentChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lssdrpc.renting/GetFeeToRentChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentingServer).GetFeeToRentChannel(ctx, req.(*GetFeeToRentChannelCommand))
	}
	return interceptor(ctx, in, info, handler)
}

var _Renting_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lssdrpc.renting",
	HandlerType: (*RentingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRentChannelInvoice",
			Handler:    _Renting_GenerateRentChannelInvoice_Handler,
		},
		{
			MethodName: "RentChannel",
			Handler:    _Renting_RentChannel_Handler,
		},
		{
			MethodName: "GetChannelStatus",
			Handler:    _Renting_GetChannelStatus_Handler,
		},
		{
			MethodName: "GetFeeToRentChannel",
			Handler:    _Renting_GetFeeToRentChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lssdrpc.proto",
}
